{
	"info": {
		"_postman_id": "dac284bb-e6e3-45a7-ac3c-2c29ed6c2ef7",
		"name": "Home Assignment",
		"description": "#### **Configuring the Request**\n\n- **Set the HTTP Method**: Select the desired HTTP method (GET, POST, PUT, DELETE, etc.) from the dropdown next to the URL field.\n    \n- **Enter the URL**: Type the URL of the API endpoint you want to test.\n    \n- **Add Parameters** (if needed):\n    \n    - **Query Parameters**: Click on the \"Params\" tab to add query parameters to the URL.\n        \n    - **Path Variables**: Use curly braces `{}` in the URL for dynamic path segments (e.g., `/users/{id}`).\n        \n- **Set Headers**: Click on the \"Headers\" tab to add custom headers required by the API (e.g., `Content-Type`, `Authorization`).\n    \n\n#### **Providing Request Body**\n\n- **For POST/PUT Requests**:\n    \n    - Click on the \"Body\" tab.\n        \n    - Choose the format for the request body (e.g., `raw`, `form-data`, `x-www-form-urlencoded`).\n        \n    - Enter the request payload. For `raw`, you can select JSON, XML, or other formats from the dropdown.\n        \n\n#### **Sending the Request**\n\n- **Click \"Send\"**: After configuring your request, click the \"Send\" button to submit the request to the API.\n    \n\n#### **Inspecting the Response**\n\n- **View Response**: The response from the server will appear in the lower section of the Postman interface.\n    \n    - **Status Code**: Check the HTTP status code to see if the request was successful (e.g., 200 OK, 404 Not Found).\n        \n    - **Response Body**: View the response body, which can be in JSON, or plain text.\n        \n    - **Headers**: Inspect the response headers for additional information (e.g., content type, caching).",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "29446770"
	},
	"item": [
		{
			"name": "Get Presentation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/presentation/:title",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"presentation",
						":title"
					],
					"variable": [
						{
							"key": "title",
							"value": ""
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "New Presentation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"Title\": \"Home Assignment\",\n    \"AuthorsList\": [\"ofir mikel\" , \"alin alin\"],\n    \"DatePublished\": \"2024-08-07T00:00:00Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/presentation",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "New Slide",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"presentation\": \"Home Assignment\",\r\n    \"content\": \"Hello World\",\r\n    \"style\": {\r\n        \"fontSize\": 2,\r\n        \"fontColor\": \"#000000\",\r\n        \"fontWeight\": \"bold\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/slide"
			},
			"response": []
		},
		{
			"name": "Delete Slide",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/slide/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"slide",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Presentation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/presentation/:title",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"presentation",
						":title"
					],
					"variable": [
						{
							"key": "title",
							"value": "ofir"
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get all",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/presentations"
			},
			"response": []
		},
		{
			"name": "alter Authors",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"AuthorsList\": [\"sks\" ,\"sfdfg\" , \"gfgfdg\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/presentation/authors/:title",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"presentation",
						"authors",
						":title"
					],
					"variable": [
						{
							"key": "title",
							"value": "ofir"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "alterSlide",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"hesdf\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/slide/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"slide",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "66b3c032b7c7e62e5866f886"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "http://localhost:3000"
		}
	]
}